@model MVC_Task.Models.User

@{
    ViewBag.Title = "UserProfile";

    List<SelectListItem> selectlist = new List<SelectListItem>
{
    new SelectListItem { Text = "Maharashtra", Value = "Maharashtra" },
    new SelectListItem { Text = "Karnataka", Value = "Karnataka" },
    new SelectListItem { Text = "Tamil Nadu", Value = "Tamil Nadu" },
    new SelectListItem { Text = "Gujarat", Value = "Gujarat" },
    new SelectListItem { Text = "Rajasthan", Value = "Rajasthan" }
};

    string actionname = ViewContext.RouteData.Values["action"].ToString();
}

@section styles{
    <link rel="stylesheet" href="~/Content/IntlInput/intlTelInput.min.css">
}

<h2>
    <span class="logo-border font-34 text-center">
        <span class="glyphicon glyphicon-user font-28"></span>
    </span>
    User Profile
</h2>

@if (Model == null)
{
    <div>
        <h1 class="text-center text-danger font-34">No User Details Found</h1>
        <a role="button" class="btn btn-default" href="@Url.Action("Listing","User")"><span class="glyphicon glyphicon-chevron-left"></span>  Back </a>
    </div>
}
else
{

    using (Html.BeginForm(null, null, FormMethod.Post, new { @class = "profile-edit" }))
    {

        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <hr />
            <span class="" style="float:right;"><i class="text-danger">*</i> Fields are Required</span>
            <br />
            <div class="col-md-offset-3">
                @Html.HiddenFor(model => model.Id)

                <div class="form-group">
                    @Html.LabelFor(model => model.Username, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.Username, new { htmlAttributes = new { @class = "form-control", @disabled = true } })
                        @Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-danger" })
                    </div>
                </div>
                @Html.Hidden("uid", Model.Id)

                @if (actionname == "Edit")
                {
                    <div class="form-group">
                        @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-6">
                            <div class="password-box-wrapper edit-profile">
                                @Html.TextBoxFor(model => model.Password, new { @class = "form-control password-box", @disabled = true, @type = "password" })
                                <button class="eye-password-btn glyphicon glyphicon-eye-open btn btn-default" type="button"></button>
                            </div>
                            @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger d-block" })
                        </div>
                    </div>
                }
                else
                {
                    <div class="form-group">
                        @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2 exclude" })
                        <div class="col-md-6">
                            <p class="form-control-static">
                                @Html.ActionLink("Change Password Link", "ChangePassword", "User")
                            </p>
                        </div>
                    </div>
                }


                <div class="form-group">
                    @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", @disabled = true } })
                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", @disabled = true } })
                        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        <div class="select-none">
                            <label class="radio-inline">
                                @Html.RadioButtonFor(model => model.Gender, "Male", new { @disabled = true }) Male
                            </label>
                            <label class="radio-inline">
                                @Html.RadioButtonFor(model => model.Gender, "Female", new { @disabled = true }) Female
                            </label>
                            <label class="radio-inline">
                                @Html.RadioButtonFor(model => model.Gender, "Other", new { @disabled = true }) Other
                            </label>
                        </div>
                        @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @disabled = true } })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.TextAreaFor(model => model.Address, new { @class = "form-control", @disabled = true })
                        @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Pincode, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.Pincode, new { htmlAttributes = new { @class = "form-control", @disabled = true } })
                        @Html.ValidationMessageFor(model => model.Pincode, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.DropDownListFor(model => model.State, selectlist, "Select State", new { @class = "form-control ", @disabled = true })
                        @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control", @disabled = true } })
                        @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.PhoneNo, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.PhoneNo, new { htmlAttributes = new { @class = "form-control", id = "phone", @type = "tel", @disabled = true } })
                        @Html.ValidationMessageFor(model => model.PhoneNo, "", new { @class = "text-danger d-block phone-msg" })
                    </div>
                </div>

                @if (actionname == "Edit")
                {
                    <div class="form-group">
                        @Html.LabelFor(model => model.Roles.RoleName, htmlAttributes: new { @class = "control-label col-md-2 role-dropdown" })
                        <div class="col-md-6">
                            @Html.DropDownListFor(model => model.Roles.RoleName, new List<SelectListItem>() { new SelectListItem() { Text = "Admin", Value = "Admin" }, new SelectListItem() { Text = "User", Value = "User" }, new SelectListItem() { Text = "Librarian", Value = "Librarian" } }, "Select Role", new { @class = "form-control", @disabled = true })
                            @Html.ValidationMessageFor(model => model.Roles.RoleName, "", new { @class = "text-danger " })
                        </div>
                    </div>

                }
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10 profile-buttons">
                        <button type="button" class="btn btn-default edit-btn">Edit</button>
                        @if (actionname == "Edit")
                        {
                            <a role="button" href="@Url.Action("Listing","User")" class="btn btn-default">Back</a>
                        }
                        else
                        {
                            <a role="button" href="@Url.Action("Index","Book")" class="btn btn-default back-btn" style="display:none;">Back</a>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
}

@section Scripts {
    <script src="~/Scripts/IntlTelInput/intlTelInputWithUtils.min.js"></script>
    <script src="~/Scripts/IntlTelInput/Intelinput.js"></script>
}

